import pandas as pd
import json

def create_fgos_mapping():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –§–ì–û–°"""
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –§–ì–û–°
    fgos_df = pd.read_csv('csv_files/fgos_competencies.csv')
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –§–ì–û–°
    tech_fgos_mapping = {
        # –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è -> –ü–ö-1 (–°–ø–æ—Å–æ–±–µ–Ω —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ)
        'Python': ['–ü–ö-1.1', '–ü–ö-1.2', '–ü–ö-2.1'],
        'JavaScript': ['–ü–ö-1.1', '–ü–ö-1.2'],
        'Java': ['–ü–ö-1.1', '–ü–ö-1.2', '–ü–ö-2.1'],
        'TypeScript': ['–ü–ö-1.1', '–ü–ö-1.2'],
        
        # –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ -> –ü–ö-2 (–°–ø–æ—Å–æ–±–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)
        'React': ['–ü–ö-1.2', '–ü–ö-2.1'],
        'Vue': ['–ü–ö-1.2', '–ü–ö-2.1'],
        'Django': ['–ü–ö-1.2', '–ü–ö-2.1'],
        'Flask': ['–ü–ö-1.2', '–ü–ö-2.1'],
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö -> –ü–ö-3 (–°–ø–æ—Å–æ–±–µ–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã)
        'SQL': ['–ü–ö-2.1', '–ü–ö-3.1'],
        'PostgreSQL': ['–ü–ö-2.1', '–ü–ö-3.1'],
        'MongoDB': ['–ü–ö-2.1', '–ü–ö-3.1'],
        
        # DevOps -> –ü–ö-4 (–°–ø–æ—Å–æ–±–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ)
        'Docker': ['–ü–ö-2.2', '–ü–ö-4.1'],
        'Kubernetes': ['–ü–ö-2.2', '–ü–ö-4.1'],
        'CI/CD': ['–ü–ö-2.2', '–ü–ö-4.1'],
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã -> –£–ö (–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏)
        'Git': ['–£–ö-1.1', '–ü–ö-1.1'],
        'Linux': ['–ü–ö-2.2', '–ü–ö-4.1']
    }
    
    return tech_fgos_mapping

def create_prof_standards_mapping():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"""
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∫ –û–¢–§ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤
    tech_prof_mapping = {
        # 06.001 –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
        'Python': ['06.001_A.1', '06.001_A.2', '06.001_B.1'],
        'JavaScript': ['06.001_A.1', '06.001_A.2'],
        'Java': ['06.001_A.1', '06.001_A.2', '06.001_B.1'],
        'React': ['06.001_A.2'],
        'Vue': ['06.001_A.2'],
        'Django': ['06.001_A.2', '06.001_B.1'],
        'SQL': ['06.001_A.3', '06.001_B.2'],
        'Git': ['06.001_A.1'],
        'Docker': ['06.001_B.3'],
        
        # 06.022 –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫
        'SQL': ['06.022_A.1', '06.022_A.2'],
        'Python': ['06.022_A.3', '06.022_B.1']
    }
    
    return tech_prof_mapping

def save_mappings():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–æ–≤ –≤ —Ñ–∞–π–ª—ã"""
    
    fgos_mapping = create_fgos_mapping()
    prof_mapping = create_prof_standards_mapping()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    with open('mapped_data/tech_fgos_mapping.json', 'w', encoding='utf-8') as f:
        json.dump(fgos_mapping, f, ensure_ascii=False, indent=2)
    
    with open('mapped_data/tech_prof_mapping.json', 'w', encoding='utf-8') as f:
        json.dump(prof_mapping, f, ensure_ascii=False, indent=2)
    
    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º CSV –¥–ª—è ClickHouse
    mapping_data = []
    
    for tech, competencies in fgos_mapping.items():
        for comp in competencies:
            mapping_data.append({
                'technology': tech,
                'competency_code': comp,
                'competency_type': 'FGOS',
                'standard_code': '09.03.03' if comp.startswith('–ü–ö') else 'UK'
            })
    
    for tech, standards in prof_mapping.items():
        for standard in standards:
            standard_code = standard.split('_')[0]
            mapping_data.append({
                'technology': tech,
                'competency_code': standard,
                'competency_type': 'PROF_STANDARD',
                'standard_code': standard_code
            })
    
    pd.DataFrame(mapping_data).to_csv('mapped_data/07_tech_competency_mapping.csv', 
                                     index=False, encoding='utf-8')
    
    print("‚úÖ –ú–∞–ø–ø–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã:")
    print("  üìÑ tech_fgos_mapping.json")
    print("  üìÑ tech_prof_mapping.json") 
    print("  üìÑ 07_tech_competency_mapping.csv")

if __name__ == "__main__":
    save_mappings()