import psycopg2
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'competency_analysis',
    'user': 'practice_user',
    'password': 'practice_password'
}

def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = False
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)

def create_relationships_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
    conn = get_connection()
    cur = conn.cursor()
    
    print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å
        cur.execute("DROP TABLE IF EXISTS technology_relationships CASCADE")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π
        cur.execute("""
            CREATE TABLE technology_relationships (
                id SERIAL PRIMARY KEY,
                technology_1 VARCHAR(100) NOT NULL,
                technology_2 VARCHAR(100) NOT NULL,
                relationship_type VARCHAR(50) NOT NULL,
                strength DECIMAL(3,2) DEFAULT 0.5,
                frequency INTEGER DEFAULT 1,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                
                UNIQUE(technology_1, technology_2, relationship_type),
                
                CONSTRAINT valid_relationship_type 
                CHECK (relationship_type IN ('cooccurrence', 'complementary', 'same_category', 'prerequisite', 'alternative'))
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cur.execute("CREATE INDEX idx_tech_rel_tech1 ON technology_relationships(technology_1)")
        cur.execute("CREATE INDEX idx_tech_rel_tech2 ON technology_relationships(technology_2)")
        cur.execute("CREATE INDEX idx_tech_rel_type ON technology_relationships(relationship_type)")
        cur.execute("CREATE INDEX idx_tech_rel_strength ON technology_relationships(strength)")
        
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        conn.rollback()
        raise e
    finally:
        cur.close()
        conn.close()

def create_cooccurrence_relationships():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"""
    conn = get_connection()
    cur = conn.cursor()
    
    print("üîó –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è...")
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ
        cur.execute("""
            INSERT INTO technology_relationships (technology_1, technology_2, relationship_type, strength, frequency, description)
            SELECT 
                t1.technology as tech1,
                t2.technology as tech2,
                'cooccurrence' as relationship_type,
                LEAST(1.0, COUNT(*) / 50.0) as strength,  -- –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–ª—É —Å–≤—è–∑–∏
                COUNT(*) as frequency,
                '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–º–µ—Å—Ç–µ –≤ ' || COUNT(*) || ' –≤–∞–∫–∞–Ω—Å–∏—è—Ö'
            FROM vacancy_technologies_detailed t1
            JOIN vacancy_technologies_detailed t2 ON t1.vacancy_id = t2.vacancy_id
            WHERE t1.technology < t2.technology  -- –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∞–º–æ-—Å–≤—è–∑–µ–π
                AND t1.technology IS NOT NULL 
                AND t2.technology IS NOT NULL
                AND t1.technology != t2.technology
            GROUP BY t1.technology, t2.technology
            HAVING COUNT(*) >= 3  -- –ú–∏–Ω–∏–º—É–º 3 —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
            ON CONFLICT (technology_1, technology_2, relationship_type) DO NOTHING
        """)
        
        cooccurrence_count = cur.rowcount
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {cooccurrence_count} —Å–≤—è–∑–µ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è")
        
        conn.commit()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def create_category_relationships():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
    conn = get_connection()
    cur = conn.cursor()
    
    print("üîó –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    try:
        # –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cur.execute("""
            INSERT INTO technology_relationships (technology_1, technology_2, relationship_type, strength, description)
            SELECT DISTINCT
                t1.technology as tech1,
                t2.technology as tech2,
                'same_category' as relationship_type,
                0.4 as strength,  -- –°—Ä–µ–¥–Ω—è—è —Å–≤—è–∑—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                '–û–±–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' || COALESCE(t1.category, 'Unknown')
            FROM vacancy_technologies_detailed t1
            JOIN vacancy_technologies_detailed t2 ON t1.category = t2.category
            WHERE t1.technology < t2.technology
                AND t1.category IS NOT NULL
                AND t2.category IS NOT NULL
                AND t1.category != ''
                AND t1.technology != t2.technology
            ON CONFLICT (technology_1, technology_2, relationship_type) DO NOTHING
        """)
        
        category_count = cur.rowcount
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {category_count} —Å–≤—è–∑–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        conn.commit()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def create_predefined_relationships():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π –¥–æ–ø–æ–ª–Ω—è—é—â–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
    conn = get_connection()
    cur = conn.cursor()
    
    print("üîó –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏...")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–≤—è–∑–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        predefined_relationships = [
            # Frontend —Å—Ç–µ–∫
            ('React', 'JavaScript', 'complementary', 0.9, 'React –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ JavaScript'),
            ('Vue', 'JavaScript', 'complementary', 0.9, 'Vue –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ JavaScript'),
            ('Angular', 'TypeScript', 'complementary', 0.8, 'Angular –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TypeScript'),
            ('HTML', 'CSS', 'complementary', 0.9, 'HTML –∏ CSS —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ'),
            ('React', 'Redux', 'complementary', 0.7, 'Redux —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å React'),
            
            # Backend —Å—Ç–µ–∫
            ('Python', 'Django', 'complementary', 0.8, 'Django - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Python'),
            ('Python', 'Flask', 'complementary', 0.7, 'Flask - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Python'),
            ('JavaScript', 'Node.js', 'complementary', 0.8, 'Node.js –≤—ã–ø–æ–ª–Ω—è–µ—Ç JavaScript'),
            ('Java', 'Spring', 'complementary', 0.8, 'Spring - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Java'),
            
            # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            ('SQL', 'PostgreSQL', 'complementary', 0.8, 'PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SQL'),
            ('SQL', 'MySQL', 'complementary', 0.8, 'MySQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SQL'),
            ('Python', 'PostgreSQL', 'complementary', 0.7, 'Python —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL'),
            
            # DevOps
            ('Docker', 'Kubernetes', 'complementary', 0.8, 'Kubernetes –æ—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç Docker'),
            ('Git', 'GitHub', 'complementary', 0.8, 'GitHub –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Git'),
            ('Docker', 'CI/CD', 'complementary', 0.7, 'Docker –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ CI/CD'),
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            ('React', 'Vue', 'alternative', 0.6, 'React –∏ Vue - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏'),
            ('PostgreSQL', 'MySQL', 'alternative', 0.5, 'PostgreSQL –∏ MySQL - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –°–£–ë–î'),
            ('Docker', 'Podman', 'alternative', 0.7, 'Podman - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Docker'),
            
            # –ü—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            ('JavaScript', 'TypeScript', 'prerequisite', 0.7, 'TypeScript —Ä–∞—Å—à–∏—Ä—è–µ—Ç JavaScript'),
            ('HTML', 'React', 'prerequisite', 0.6, '–ó–Ω–∞–Ω–∏–µ HTML –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è React'),
            ('SQL', 'Database', 'prerequisite', 0.8, 'SQL –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î'),
        ]
        
        created_count = 0
        
        for tech1, tech2, rel_type, strength, description in predefined_relationships:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                cur.execute("""
                    SELECT COUNT(DISTINCT technology) FROM vacancy_technologies_detailed 
                    WHERE technology IN (%s, %s)
                """, (tech1, tech2))
                
                if cur.fetchone()[0] == 2:  # –û–±–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞–π–¥–µ–Ω—ã
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    sorted_tech1, sorted_tech2 = sorted([tech1, tech2])
                    
                    cur.execute("""
                        INSERT INTO technology_relationships (technology_1, technology_2, relationship_type, strength, description)
                        VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (technology_1, technology_2, relationship_type) DO NOTHING
                    """, (sorted_tech1, sorted_tech2, rel_type, strength, description))
                    
                    if cur.rowcount > 0:
                        created_count += 1
                        print(f"  ‚úÖ {tech1} ‚Üî {tech2} ({rel_type})")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ {tech1}-{tech2}: {e}")
                continue
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π")
        
        conn.commit()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def create_analysis_views():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π"""
    conn = get_connection()
    cur = conn.cursor()
    
    print("üìä –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π...")
    
    try:
        # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        cur.execute("""
            CREATE OR REPLACE VIEW technology_relationships_extended AS
            SELECT 
                tr.id,
                tr.technology_1,
                tr.technology_2,
                tr.relationship_type,
                tr.strength,
                tr.frequency,
                tr.description,
                
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                t1_stats.vacancy_count as tech1_vacancy_count,
                t1_stats.category as tech1_category,
                
                -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ç–æ—Ä–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                t2_stats.vacancy_count as tech2_vacancy_count,
                t2_stats.category as tech2_category,
                
                tr.created_at
            FROM technology_relationships tr
            LEFT JOIN (
                SELECT 
                    technology,
                    COUNT(DISTINCT vacancy_id) as vacancy_count,
                    MODE() WITHIN GROUP (ORDER BY category) as category
                FROM vacancy_technologies_detailed 
                GROUP BY technology
            ) t1_stats ON tr.technology_1 = t1_stats.technology
            LEFT JOIN (
                SELECT 
                    technology,
                    COUNT(DISTINCT vacancy_id) as vacancy_count,
                    MODE() WITHIN GROUP (ORDER BY category) as category
                FROM vacancy_technologies_detailed 
                GROUP BY technology
            ) t2_stats ON tr.technology_2 = t2_stats.technology
        """)
        
        # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø —Å–≤—è–∑–µ–π
        cur.execute("""
            CREATE OR REPLACE VIEW top_technology_relationships AS
            SELECT 
                technology_1,
                technology_2,
                relationship_type,
                strength,
                frequency,
                description,
                tech1_category,
                tech2_category
            FROM technology_relationships_extended
            ORDER BY strength DESC, frequency DESC
        """)
        
        # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
        cur.execute("""
            CREATE OR REPLACE VIEW technology_network_stats AS
            SELECT 
                technology,
                COUNT(*) as total_relationships,
                COUNT(CASE WHEN relationship_type = 'cooccurrence' THEN 1 END) as cooccurrence_links,
                COUNT(CASE WHEN relationship_type = 'complementary' THEN 1 END) as complementary_links,
                COUNT(CASE WHEN relationship_type = 'same_category' THEN 1 END) as category_links,
                AVG(strength) as avg_relationship_strength,
                MAX(strength) as max_relationship_strength
            FROM (
                SELECT technology_1 as technology, relationship_type, strength FROM technology_relationships
                UNION ALL
                SELECT technology_2 as technology, relationship_type, strength FROM technology_relationships
            ) all_relationships
            GROUP BY technology
            ORDER BY total_relationships DESC
        """)
        
        conn.commit()
        print("‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def show_relationships_summary():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–≤—è–∑—è–º"""
    conn = get_connection()
    cur = conn.cursor()
    
    print(f"\nüìä –°–í–û–î–ö–ê –ü–û –°–í–Ø–ó–Ø–ú –¢–ï–•–ù–û–õ–û–ì–ò–ô")
    print("=" * 60)
    
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π
        cur.execute("SELECT COUNT(*) FROM technology_relationships")
        total_relationships = cur.fetchone()[0]
        print(f"üîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {total_relationships:,}")
        
        # –ü–æ —Ç–∏–ø–∞–º —Å–≤—è–∑–µ–π
        cur.execute("""
            SELECT relationship_type, COUNT(*), AVG(strength)
            FROM technology_relationships 
            GROUP BY relationship_type
            ORDER BY COUNT(*) DESC
        """)
        print(f"\nüìà –ü–æ —Ç–∏–ø–∞–º —Å–≤—è–∑–µ–π:")
        for row in cur.fetchall():
            print(f"  ‚Ä¢ {row[0]}: {row[1]:,} —Å–≤—è–∑–µ–π (—Å—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞: {row[2]:.2f})")
        
        # –¢–æ–ø-10 —Å–∞–º—ã—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        cur.execute("""
            SELECT technology, total_relationships, cooccurrence_links, complementary_links
            FROM technology_network_stats
            ORDER BY total_relationships DESC
            LIMIT 10
        """)
        print(f"\nüåü –¢–æ–ø-10 —Å–∞–º—ã—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:")
        for i, row in enumerate(cur.fetchall(), 1):
            print(f"  {i:2d}. {row[0]}: {row[1]} —Å–≤—è–∑–µ–π ({row[2]} —Å–æ–≤–º., {row[3]} –∫–æ–º–ø.)")
        
        # –¢–æ–ø-10 —Å–∏–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
        cur.execute("""
            SELECT technology_1, technology_2, relationship_type, strength, frequency
            FROM technology_relationships
            ORDER BY strength DESC, frequency DESC
            LIMIT 10
        """)
        print(f"\nüí™ –¢–æ–ø-10 —Å–∏–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π:")
        for i, row in enumerate(cur.fetchall(), 1):
            freq_str = f", —á–∞—Å—Ç–æ—Ç–∞: {row[4]}" if row[4] and row[4] > 1 else ""
            print(f"  {i:2d}. {row[0]} ‚Üî {row[1]} ({row[2]}, —Å–∏–ª–∞: {row[3]:.2f}{freq_str})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cur.execute("""
            SELECT 
                CASE 
                    WHEN tech1_category = tech2_category THEN '–í–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                    ELSE '–ú–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏'
                END as relationship_scope,
                COUNT(*) as count
            FROM technology_relationships_extended
            WHERE tech1_category IS NOT NULL AND tech2_category IS NOT NULL
            GROUP BY 
                CASE 
                    WHEN tech1_category = tech2_category THEN '–í–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                    ELSE '–ú–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏'
                END
        """)
        print(f"\nüè∑Ô∏è –°–≤—è–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for row in cur.fetchall():
            print(f"  ‚Ä¢ {row[0]}: {row[1]:,} —Å–≤—è–∑–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        cur.close()
        conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π"""
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –°–í–Ø–ó–ï–ô –¢–ï–•–ù–û–õ–û–ì–ò–ô –î–õ–Ø –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –ë–î")
    print("=" * 60)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π
        create_relationships_table()
        
        # 2. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
        create_cooccurrence_relationships()
        
        # 3. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        create_category_relationships()
        
        # 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
        create_predefined_relationships()
        
        # 5. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        create_analysis_views()
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        show_relationships_summary()
        
        print(f"\n‚úÖ –°–û–ó–î–ê–ù–ò–ï –°–í–Ø–ó–ï–ô –ó–ê–í–ï–†–®–ï–ù–û!")
        print("üéØ –°–≤—è–∑–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!")
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("   python3 db/check_data.py")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()