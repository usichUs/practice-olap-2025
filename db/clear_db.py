import psycopg2
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'competency_analysis',
    'user': 'practice_user',
    'password': 'practice_password'
}

def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        return psycopg2.connect(**DB_CONFIG)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def show_current_tables():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
    conn = get_connection()
    if not conn:
        return []
    
    try:
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("""
            SELECT table_name, 
                   (SELECT COUNT(*) FROM information_schema.columns 
                    WHERE table_name = t.table_name) as column_count
            FROM information_schema.tables t
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """)
        tables = cur.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        cur.execute("""
            SELECT table_name
            FROM information_schema.views 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        views = [row[0] for row in cur.fetchall()]
        
        cur.close()
        conn.close()
        
        return tables, views
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        return [], []

def clean_database_soft():
    """–ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    if not conn:
        return False
    
    try:
        cur = conn.cursor()
        
        print("üßπ –ú–Ø–ì–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–î")
        print("-" * 40)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        views_to_drop = [
            'olap_competency_analysis',
            'tech_market_summary', 
            'role_tech_salary_cube'
        ]
        
        print("üìä –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π:")
        for view in views_to_drop:
            try:
                cur.execute(f"DROP VIEW IF EXISTS {view} CASCADE")
                print(f"  ‚úÖ {view}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è {view}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
        tables_to_drop = [
            'vacancy_technologies_detailed',  # –°–Ω–∞—á–∞–ª–∞ –¥–æ—á–µ—Ä–Ω–∏–µ
            'vacancy_details',
            'fgos_competencies',
            'otf_td_standards'
        ]
        
        print("\nüóÑÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü:")
        for table in tables_to_drop:
            try:
                cur.execute(f"DROP TABLE IF EXISTS {table} CASCADE")
                print(f"  ‚úÖ {table}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è {table}: {e}")
        
        conn.commit()
        print("\n‚úÖ –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º—è–≥–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def clean_database_hard():
    """–ñ–µ—Å—Ç–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ - –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã"""
    conn = get_connection()
    if not conn:
        return False
    
    try:
        cur = conn.cursor()
        
        print("üí• –ñ–ï–°–¢–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–î")
        print("-" * 40)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å—é —Å—Ö–µ–º—É public
        cur.execute("DROP SCHEMA public CASCADE")
        print("  ‚úÖ –°—Ö–µ–º–∞ public —É–¥–∞–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        cur.execute("CREATE SCHEMA public")
        print("  ‚úÖ –°—Ö–µ–º–∞ public —Å–æ–∑–¥–∞–Ω–∞")
        
        # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞
        cur.execute("GRANT ALL ON SCHEMA public TO practice_user")
        cur.execute("GRANT ALL ON SCHEMA public TO public")
        print("  ‚úÖ –ü—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã")
        
        conn.commit()
        print("\n‚úÖ –ñ–µ—Å—Ç–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∂–µ—Å—Ç–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def show_database_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ë–î"""
    print(f"\nüìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –ë–î")
    print("=" * 50)
    
    tables, views = show_current_tables()
    
    if not tables and not views:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        return
    
    if tables:
        print(f"üóÑÔ∏è –¢–ê–ë–õ–ò–¶–´ ({len(tables)}):")
        for table_name, col_count in tables:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            conn = get_connection()
            if conn:
                try:
                    cur = conn.cursor()
                    cur.execute(f"SELECT COUNT(*) FROM {table_name}")
                    row_count = cur.fetchone()[0]
                    print(f"  üìä {table_name}: {row_count:,} –∑–∞–ø–∏—Å–µ–π ({col_count} —Å—Ç–æ–ª–±—Ü–æ–≤)")
                    cur.close()
                    conn.close()
                except:
                    print(f"  üìä {table_name}: –æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π")
    
    if views:
        print(f"\nüìà –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–Ø ({len(views)}):")
        for view in views:
            print(f"  üìä {view}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏"""
    print("üóëÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ß–ò–°–¢–ö–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    show_database_status()
    
    if not get_connection():
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ docker-compose up -d")
        return
    
    print(f"\nüéØ –í–ê–†–ò–ê–ù–¢–´ –û–ß–ò–°–¢–ö–ò:")
    print("1. üßπ –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö)")
    print("2. üí• –ñ–µ—Å—Ç–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (–ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã)")
    print("3. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ë–î")
    print("4. ‚ùå –û—Ç–º–µ–Ω–∞")
    
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
        
        if choice == '1':
            print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è!")
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
            
            if confirm in ['y', 'yes', '–¥–∞']:
                if clean_database_soft():
                    print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python3 db_loader.py")
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif choice == '2':
            print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å—Ö–µ–º–∞ –ë–î!")
            print("–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –æ–±—ä–µ–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            confirm = input("–í—ã –ê–ë–°–û–õ–Æ–¢–ù–û —É–≤–µ—Ä–µ–Ω—ã? (y/N): ").strip().lower()
            
            if confirm in ['y', 'yes', '–¥–∞']:
                double_confirm = input("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
                if double_confirm in ['y', 'yes', '–¥–∞']:
                    if clean_database_hard():
                        print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: python3 db_loader.py")
                else:
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        
        elif choice == '3':
            show_database_status()
        
        elif choice == '4':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()