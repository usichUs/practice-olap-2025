import psycopg2
import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'competency_analysis',
    'user': 'practice_user',
    'password': 'practice_password'
}

def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        return psycopg2.connect(**DB_CONFIG)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)

def clean_data(value, data_type='string', max_length=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if pd.isna(value) or value == '' or value is None:
        return None
    
    if data_type == 'string':
        result = str(value).strip()
        if max_length:
            result = result[:max_length]
        return result if result else None
    
    elif data_type == 'integer':
        try:
            num_value = float(value)
            if pd.isna(num_value) or np.isinf(num_value):
                return None
            return int(num_value) if num_value <= 2147483647 else 2147483647
        except (ValueError, TypeError, OverflowError):
            return None
    
    elif data_type == 'bigint':
        try:
            num_value = float(value)
            if pd.isna(num_value) or np.isinf(num_value):
                return None
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç
            if num_value > 10000000:
                return 10000000
            if num_value < 0:
                return None
            return int(num_value)
        except (ValueError, TypeError, OverflowError):
            return None
    
    return value

def create_final_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è OLAP –∞–Ω–∞–ª–∏–∑–∞"""
    conn = get_connection()
    cur = conn.cursor()
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è OLAP...")
    
    try:
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_to_drop = [
            'vacancy_technologies_detailed',
            'vacancy_details', 
            'fgos_competencies',
            'otf_td_standards'
        ]
        
        for table in tables_to_drop:
            cur.execute(f"DROP TABLE IF EXISTS {table} CASCADE")
        
        # 1. –¢–∞–±–ª–∏—Ü–∞ –§–ì–û–° –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        cur.execute("""
            CREATE TABLE fgos_competencies (
                id SERIAL PRIMARY KEY,
                direction_code VARCHAR(20) NOT NULL,
                direction_name VARCHAR(500) NOT NULL,
                competency_code VARCHAR(20) NOT NULL,
                competency_name TEXT NOT NULL,
                competency_description TEXT,
                competency_type VARCHAR(20),
                category VARCHAR(100),
                level_description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                
                UNIQUE(direction_code, competency_code)
            )
        """)
        
        # 2. –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ (OTF/TD)
        cur.execute("""
            CREATE TABLE otf_td_standards (
                id SERIAL PRIMARY KEY,
                standard_code VARCHAR(20) NOT NULL,
                otf_code VARCHAR(10) NOT NULL,
                otf_name VARCHAR(500) NOT NULL,
                td_code VARCHAR(20) NOT NULL,
                td_name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                
                UNIQUE(standard_code, td_code)
            )
        """)
        
        # 3. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π
        cur.execute("""
            CREATE TABLE vacancy_details (
                id SERIAL PRIMARY KEY,
                vacancy_id VARCHAR(50) UNIQUE NOT NULL,
                title TEXT NOT NULL,
                company VARCHAR(500),
                company_size VARCHAR(50),
                area VARCHAR(100),
                published_date TIMESTAMP,
                experience_raw VARCHAR(100),
                experience_level VARCHAR(50),
                role VARCHAR(50),
                domain VARCHAR(50),
                salary_from BIGINT,
                salary_to BIGINT,
                avg_salary BIGINT,
                tech_count INTEGER DEFAULT 0,
                skills_count INTEGER DEFAULT 0,
                fgos_competencies_count INTEGER DEFAULT 0,
                prof_competencies_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # 4. –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        cur.execute("""
            CREATE TABLE vacancy_technologies_detailed (
                id SERIAL PRIMARY KEY,
                vacancy_id VARCHAR(50) NOT NULL,
                technology VARCHAR(100) NOT NULL,
                frequency INTEGER DEFAULT 1,
                category VARCHAR(100),
                level VARCHAR(50),
                domain VARCHAR(50),
                fgos_competencies TEXT,
                prof_standards TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                
                FOREIGN KEY (vacancy_id) REFERENCES vacancy_details(vacancy_id) ON DELETE CASCADE
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è OLAP
        indexes = [
            "CREATE INDEX idx_vac_role ON vacancy_details(role)",
            "CREATE INDEX idx_vac_domain ON vacancy_details(domain)",
            "CREATE INDEX idx_vac_exp_level ON vacancy_details(experience_level)",
            "CREATE INDEX idx_vac_salary ON vacancy_details(avg_salary)",
            "CREATE INDEX idx_tech_technology ON vacancy_technologies_detailed(technology)",
            "CREATE INDEX idx_tech_category ON vacancy_technologies_detailed(category)",
            "CREATE INDEX idx_fgos_direction ON fgos_competencies(direction_code)",
            "CREATE INDEX idx_fgos_competency ON fgos_competencies(competency_code)",
            "CREATE INDEX idx_otf_standard ON otf_td_standards(standard_code)"
        ]
        
        for index_sql in indexes:
            cur.execute(index_sql)
        
        conn.commit()
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        conn.rollback()
        raise e
    finally:
        cur.close()
        conn.close()

def load_fgos_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –§–ì–û–°"""
    csv_file = 'csv_files/fgos_competencies.csv'
    
    if not os.path.exists(csv_file):
        print(f"‚ö†Ô∏è –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üìö –ó–∞–≥—Ä—É–∑–∫–∞ –§–ì–û–° –∏–∑ {csv_file}")
    
    df = pd.read_csv(csv_file)
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        loaded_count = 0
        for _, row in df.iterrows():
            try:
                cur.execute("""
                    INSERT INTO fgos_competencies (
                        direction_code, direction_name, competency_code, 
                        competency_name, competency_description, competency_type,
                        category, level_description
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT (direction_code, competency_code) DO NOTHING
                """, (
                    clean_data(row.get('direction_code'), 'string', 20),
                    clean_data(row.get('direction_name'), 'string', 500),
                    clean_data(row.get('competency_code'), 'string', 20),
                    clean_data(row.get('competency_name'), 'string'),
                    clean_data(row.get('competency_description'), 'string'),
                    clean_data(row.get('competency_type'), 'string', 20),
                    clean_data(row.get('category'), 'string', 100),
                    clean_data(row.get('level_description'), 'string')
                ))
                loaded_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–ì–û–° —Å—Ç—Ä–æ–∫–∏: {e}")
                continue
        
        conn.commit()
        print(f"‚úÖ –§–ì–û–°: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∑–∞–ø–∏—Å–µ–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –§–ì–û–°: {e}")
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def load_otf_td_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"""
    csv_file = 'csv_files/otf_td.csv'
    
    if not os.path.exists(csv_file):
        print(f"‚ö†Ô∏è –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üíº –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∏–∑ {csv_file}")
    
    df = pd.read_csv(csv_file)
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        loaded_count = 0
        for _, row in df.iterrows():
            try:
                cur.execute("""
                    INSERT INTO otf_td_standards (
                        standard_code, otf_code, otf_name, td_code, td_name
                    ) VALUES (%s, %s, %s, %s, %s)
                    ON CONFLICT (standard_code, td_code) DO NOTHING
                """, (
                    clean_data(row.get('–°—Ç–∞–Ω–¥–∞—Ä—Ç'), 'string', 20),
                    clean_data(row.get('OTF_–∫–æ–¥'), 'string', 10),
                    clean_data(row.get('OTF_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'), 'string', 500),
                    clean_data(row.get('TD_–∫–æ–¥'), 'string', 20),
                    clean_data(row.get('TD_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'), 'string')
                ))
                loaded_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –û–¢–§ —Å—Ç—Ä–æ–∫–∏: {e}")
                continue
        
        conn.commit()
        print(f"‚úÖ –ü—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∑–∞–ø–∏—Å–µ–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {e}")
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def load_hh_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö HH"""
    csv_dir = 'csv_files'
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–µ–∂–∏–µ —Ñ–∞–π–ª—ã HH
    vacancy_files = [f for f in os.listdir(csv_dir) if f.startswith('hh_vacancies_enhanced_')]
    tech_files = [f for f in os.listdir(csv_dir) if f.startswith('hh_technologies_detailed_')]
    
    if not vacancy_files or not tech_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã HH –¥–∞–Ω–Ω—ã—Ö –≤ csv_files/")
        return False
    
    latest_vacancy_file = max(vacancy_files)
    latest_tech_file = max(tech_files)
    
    print(f"üíº –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö HH:")
    print(f"  üìÑ –í–∞–∫–∞–Ω—Å–∏–∏: {latest_vacancy_file}")
    print(f"  üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {latest_tech_file}")
    
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancy_df = pd.read_csv(os.path.join(csv_dir, latest_vacancy_file))
        
        vacancy_loaded = 0
        for _, row in vacancy_df.iterrows():
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
                published_date = row.get('published_date')
                if pd.notna(published_date) and published_date != '':
                    try:
                        published_date = pd.to_datetime(published_date).strftime('%Y-%m-%d %H:%M:%S')
                    except:
                        published_date = None
                else:
                    published_date = None
                
                cur.execute("""
                    INSERT INTO vacancy_details (
                        vacancy_id, title, company, company_size, area,
                        published_date, experience_raw, experience_level,
                        role, domain, salary_from, salary_to, avg_salary,
                        tech_count, skills_count, fgos_competencies_count, prof_competencies_count
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT (vacancy_id) DO NOTHING
                """, (
                    clean_data(row.get('vacancy_id'), 'string', 50),
                    clean_data(row.get('title'), 'string'),
                    clean_data(row.get('company'), 'string', 500),
                    clean_data(row.get('company_size'), 'string', 50),
                    clean_data(row.get('area'), 'string', 100),
                    published_date,
                    clean_data(row.get('experience_raw'), 'string', 100),
                    clean_data(row.get('experience_level'), 'string', 50),
                    clean_data(row.get('role'), 'string', 50),
                    clean_data(row.get('domain'), 'string', 50),
                    clean_data(row.get('salary_from'), 'bigint'),
                    clean_data(row.get('salary_to'), 'bigint'),
                    clean_data(row.get('avg_salary'), 'bigint'),
                    clean_data(row.get('tech_count'), 'integer') or 0,
                    clean_data(row.get('skills_count'), 'integer') or 0,
                    clean_data(row.get('fgos_competencies_count'), 'integer') or 0,
                    clean_data(row.get('prof_competencies_count'), 'integer') or 0
                ))
                vacancy_loaded += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
                continue
        
        print(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {vacancy_loaded} –∑–∞–ø–∏—Å–µ–π")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        tech_df = pd.read_csv(os.path.join(csv_dir, latest_tech_file))
        
        tech_loaded = 0
        for _, row in tech_df.iterrows():
            try:
                vacancy_id = clean_data(row.get('vacancy_id'), 'string', 50)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                cur.execute("SELECT 1 FROM vacancy_details WHERE vacancy_id = %s", (vacancy_id,))
                if not cur.fetchone():
                    continue
                
                cur.execute("""
                    INSERT INTO vacancy_technologies_detailed (
                        vacancy_id, technology, frequency, category, level,
                        domain, fgos_competencies, prof_standards
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                """, (
                    vacancy_id,
                    clean_data(row.get('technology'), 'string', 100),
                    clean_data(row.get('frequency'), 'integer') or 1,
                    clean_data(row.get('category'), 'string', 100),
                    clean_data(row.get('level'), 'string', 50),
                    clean_data(row.get('domain'), 'string', 50),
                    clean_data(row.get('fgos_competencies'), 'string'),
                    clean_data(row.get('prof_standards'), 'string')
                ))
                tech_loaded += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {e}")
                continue
        
        print(f"‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {tech_loaded} –∑–∞–ø–∏—Å–µ–π")
        
        conn.commit()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HH –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False
    finally:
        cur.close()
        conn.close()

def create_olap_views():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è OLAP –∞–Ω–∞–ª–∏–∑–∞"""
    conn = get_connection()
    cur = conn.cursor()
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ OLAP –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...")
    
    try:
        # 1. –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        cur.execute("""
            CREATE OR REPLACE VIEW olap_competency_analysis AS
            SELECT 
                vd.vacancy_id,
                vd.title,
                vd.company,
                vd.role,
                vd.domain,
                vd.experience_level,
                vd.avg_salary,
                vd.area,
                
                vtd.technology,
                vtd.category as tech_category,
                vtd.level as tech_level,
                vtd.frequency,
                
                -- –ò–∑–≤–ª–µ–∫–∞–µ–º –§–ì–û–° –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                CASE WHEN vtd.fgos_competencies IS NOT NULL 
                     THEN string_to_array(vtd.fgos_competencies, ',')
                     ELSE ARRAY[]::text[] 
                END as fgos_competencies_array,
                
                -- –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏  
                CASE WHEN vtd.prof_standards IS NOT NULL
                     THEN string_to_array(vtd.prof_standards, ',')
                     ELSE ARRAY[]::text[]
                END as prof_standards_array,
                
                -- –î–∏–∞–ø–∞–∑–æ–Ω—ã –∑–∞—Ä–ø–ª–∞—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                CASE 
                    WHEN vd.avg_salary IS NULL THEN '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    WHEN vd.avg_salary < 100000 THEN '–î–æ 100–∫'
                    WHEN vd.avg_salary < 200000 THEN '100-200–∫'
                    WHEN vd.avg_salary < 300000 THEN '200-300–∫'
                    ELSE '300–∫+'
                END as salary_range,
                
                -- –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü
                EXTRACT(YEAR FROM vd.published_date) as publish_year,
                EXTRACT(MONTH FROM vd.published_date) as publish_month
                
            FROM vacancy_details vd
            LEFT JOIN vacancy_technologies_detailed vtd ON vd.vacancy_id = vtd.vacancy_id
        """)
        
        # 2. –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
        cur.execute("""
            CREATE OR REPLACE VIEW tech_market_summary AS
            SELECT 
                technology,
                tech_category,
                COUNT(DISTINCT vacancy_id) as vacancy_count,
                SUM(frequency) as total_mentions,
                AVG(avg_salary) as avg_salary,
                COUNT(DISTINCT company) as company_count,
                COUNT(DISTINCT role) as role_count,
                
                -- –¢–æ–ø —Ä–æ–ª—å –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                MODE() WITHIN GROUP (ORDER BY role) as top_role,
                
                -- –¢–æ–ø —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
                MODE() WITHIN GROUP (ORDER BY experience_level) as top_experience_level
                
            FROM olap_competency_analysis
            WHERE technology IS NOT NULL
            GROUP BY technology, tech_category
        """)
        
        # 3. –ö—É–± –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ–ª—å √ó —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è √ó –∑–∞—Ä–ø–ª–∞—Ç–∞
        cur.execute("""
            CREATE OR REPLACE VIEW role_tech_salary_cube AS
            SELECT 
                role,
                technology,
                salary_range,
                COUNT(*) as vacancy_count,
                AVG(avg_salary) as avg_salary,
                MIN(avg_salary) as min_salary,
                MAX(avg_salary) as max_salary
            FROM olap_competency_analysis
            WHERE role IS NOT NULL AND technology IS NOT NULL
            GROUP BY role, technology, salary_range
        """)
        
        conn.commit()
        print("‚úÖ OLAP –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def show_final_summary():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞"""
    conn = get_connection()
    cur = conn.cursor()
    
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    queries = [
        ("üìö –§–ì–û–° –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", "SELECT COUNT(*) FROM fgos_competencies"),
        ("üíº –ü—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã (–û–¢–§/–¢–î)", "SELECT COUNT(*) FROM otf_td_standards"),
        ("üè¢ –í–∞–∫–∞–Ω—Å–∏–∏", "SELECT COUNT(*) FROM vacancy_details"),
        ("üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–¥–µ—Ç–∞–ª—å–Ω–æ)", "SELECT COUNT(*) FROM vacancy_technologies_detailed"),
        ("üí∞ –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏", "SELECT COUNT(*) FROM vacancy_details WHERE avg_salary IS NOT NULL"),
        ("üåü –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", "SELECT COUNT(DISTINCT technology) FROM vacancy_technologies_detailed"),
        ("üè≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π", "SELECT COUNT(DISTINCT company) FROM vacancy_details WHERE company IS NOT NULL")
    ]
    
    for name, query in queries:
        try:
            cur.execute(query)
            result = cur.fetchone()[0]
            print(f"  {name}: {result:,}")
        except Exception as e:
            print(f"  ‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")
    
    # –¢–æ–ø —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    print(f"\nüîß –¢–û–ü-10 –¢–ï–•–ù–û–õ–û–ì–ò–ô:")
    cur.execute("""
        SELECT technology, vacancy_count, avg_salary
        FROM tech_market_summary
        ORDER BY vacancy_count DESC
        LIMIT 10
    """)
    
    for i, (tech, count, salary) in enumerate(cur.fetchall(), 1):
        salary_str = f"{salary:,.0f} —Ä—É–±." if salary else "–Ω/–¥"
        print(f"  {i:2d}. {tech}: {count} –≤–∞–∫–∞–Ω—Å–∏–π (—Å—Ä. {salary_str})")
    
    cur.close()
    conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø OLAP –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 70)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_final_tables()
        
        # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –§–ì–û–°
        if not load_fgos_data():
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –§–ì–û–°, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
        if not load_otf_td_data():
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–æ—Ñ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ HH
        if not load_hh_data():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ HH")
            return False
        
        # 5. –°–æ–∑–¥–∞–µ–º OLAP –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        create_olap_views()
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        show_final_summary()
        
        print(f"\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üéØ –ì–æ—Ç–æ–≤–æ –¥–ª—è:")
        print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ClickHouse")
        print("  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è OLAP –∫—É–±–æ–≤")
        print("  ‚Ä¢ GROUP BY CUBE –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("  ‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Grafana/DataLens")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()